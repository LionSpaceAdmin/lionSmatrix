# Lions of Zion Platform - Docker Compose Configuration
version: '3.8'

services:
  # Main Next.js Web Application
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: runner
      platforms:
        - linux/arm64
        - linux/amd64
      args:
        NODE_VERSION: "22"
        PNPM_VERSION: "9.1.0"
        NEXT_PUBLIC_APP_ENV: "production"
        NEXT_PUBLIC_PLATFORM_NAME: "Lions of Zion"
        NEXT_PUBLIC_API_URL: "http://localhost:3000/api"
        NEXT_PUBLIC_SUPPORTED_LOCALES: "en,he,es,fr,de,ar"
        NEXT_PUBLIC_DEFAULT_LOCALE: "en"
    container_name: lions-web
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
      - HOSTNAME=0.0.0.0
    volumes:
      - web-cache:/app/.next/cache
    networks:
      - lions-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
      - postgres

  # Development environment (alternative to production)
  web-dev:
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile
      target: development
    container_name: lions-web-dev
    ports:
      - "3000:3000"
      - "3001:3001"
      - "3002:3002"
      - "9229:9229" # Node.js debugger
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - TURBO_TELEMETRY_DISABLED=1
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=2000
      - NODE_OPTIONS=--max-old-space-size=4096 --inspect=0.0.0.0:9229
    volumes:
      - .:/app:delegated
      - /app/node_modules
      - /app/.next
      - pnpm-store:/usr/local/share/pnpm-store
      - turbo-cache:/app/.turbo
    networks:
      - lions-network
    command: pnpm dev
    profiles:
      - dev

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: lions-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - lions-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: lions-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: lions_of_zion
      POSTGRES_USER: lions_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-lions_secure_password_2025}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - lions-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lions_user -d lions_of_zion"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: lions-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./infrastructure/ssl:/etc/nginx/ssl:ro
    networks:
      - lions-network
    restart: unless-stopped
    depends_on:
      - web
    profiles:
      - production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: lions-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - lions-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: lions-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-lions_admin_2025}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - lions-network
    restart: unless-stopped
    depends_on:
      - prometheus
    profiles:
      - monitoring

networks:
  lions-network:
    driver: bridge
    name: lions-network

volumes:
  # Application data
  web-cache:
    name: lions-web-cache
  
  # Development volumes
  pnpm-store:
    name: lions-pnpm-store
  turbo-cache:
    name: lions-turbo-cache
  
  # Database volumes
  postgres-data:
    name: lions-postgres-data
  redis-data:
    name: lions-redis-data
    
  # Monitoring volumes
  prometheus-data:
    name: lions-prometheus-data
  grafana-data:
    name: lions-grafana-data

# Usage Examples:
# 
# Production deployment:
#   docker-compose up -d web redis postgres
#
# Development with hot reload:
#   docker-compose --profile dev up web-dev redis postgres
#
# Full monitoring stack:
#   docker-compose --profile production --profile monitoring up -d
#
# Build and run specific service:
#   docker-compose build web
#   docker-compose up web
#
# View logs:
#   docker-compose logs -f web
#
# Scale web service:
#   docker-compose up -d --scale web=3