#!/bin/bash

# LionSpace QA Status Check Script
# ◊ô◊ß◊ê - Quality Assurance Status Report

set -e

echo "üîç LIONSPACE QA STATUS CHECK - ◊ô◊ß◊ê"
echo "=================================="
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Track overall status
TOTAL_CHECKS=0
PASSED_CHECKS=0

function check_status() {
    local name="$1"
    local command="$2"
    local description="$3"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    echo -n "üîé $name: "
    
    if eval "$command" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ PASS${NC} - $description"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        echo -e "${RED}‚ùå FAIL${NC} - $description"
    fi
}

function check_status_with_output() {
    local name="$1"
    local command="$2"
    local description="$3"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    echo -n "üîé $name: "
    
    local output
    output=$(eval "$command" 2>&1)
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        echo -e "${GREEN}‚úÖ PASS${NC} - $description"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        echo -e "${RED}‚ùå FAIL${NC} - $description"
        echo "   Error: $output" | head -3
    fi
}

echo "üìã BASIC QUALITY CHECKS"
echo "----------------------"

# TypeScript compilation
check_status "TypeScript" "npm run typecheck" "Code compiles without type errors"

# ESLint 
check_status_with_output "ESLint" "npm run lint" "Code follows linting standards"

# Tests
check_status "Tests" "npm test" "All unit tests pass"

# Build
check_status "Build" "npm run build" "Application builds successfully"

echo ""
echo "üìä COVERAGE ANALYSIS" 
echo "-------------------"

# Test coverage check
if [ -f "coverage/lcov.info" ]; then
    COVERAGE=$(grep -o 'LF:[0-9]*' coverage/lcov.info | tail -1 | cut -d: -f2)
    if [ "$COVERAGE" -gt 80 ]; then
        echo -e "üîé Test Coverage: ${GREEN}‚úÖ GOOD${NC} - $COVERAGE% coverage"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        echo -e "üîé Test Coverage: ${YELLOW}‚ö†Ô∏è LOW${NC} - $COVERAGE% coverage (target: 80%)"
    fi
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
else
    echo -e "üîé Test Coverage: ${RED}‚ùå NONE${NC} - No coverage reports found"
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
fi

echo ""
echo "üîí SECURITY CHECKS"
echo "-----------------"

# Check for security vulnerabilities
check_status "Dependencies" "npm audit --audit-level moderate" "No moderate+ security vulnerabilities"

# Check for exposed secrets
check_status "Secrets" "! grep -r 'sk-' src/ || ! grep -r 'pk_' src/" "No API keys in source code"

echo ""
echo "‚ö° PERFORMANCE CHECKS"
echo "-------------------"

# Bundle size check
if [ -f ".next/trace" ]; then
    echo -e "üîé Bundle Analysis: ${GREEN}‚úÖ AVAILABLE${NC} - Build trace exists"
    PASSED_CHECKS=$((PASSED_CHECKS + 1))
else
    echo -e "üîé Bundle Analysis: ${YELLOW}‚ö†Ô∏è MISSING${NC} - No build trace found"
fi
TOTAL_CHECKS=$((TOTAL_CHECKS + 1))

echo ""
echo "üìÅ FILE STRUCTURE CHECKS"
echo "-----------------------"

# Check for required files
check_status "Environment" "[ -f '.env.example' ] || [ -f '.env.local' ]" "Environment configuration exists"
check_status "Documentation" "[ -f 'README.md' ]" "Project documentation exists"
check_status "License" "[ -f 'LICENSE' ]" "License file exists"

echo ""
echo "üéØ DEPLOYMENT READINESS"
echo "----------------------"

# Check Vercel config
check_status "Vercel Config" "[ -f 'vercel.json' ]" "Deployment configuration exists"

# Check for build output
check_status "Build Output" "[ -d '.next' ]" "Application has been built"

echo ""
echo "üìà QA SUMMARY"
echo "============="

# Calculate percentage
PERCENTAGE=$((PASSED_CHECKS * 100 / TOTAL_CHECKS))

echo "üìä Total Checks: $TOTAL_CHECKS"
echo "‚úÖ Passed: $PASSED_CHECKS"
echo "‚ùå Failed: $((TOTAL_CHECKS - PASSED_CHECKS))"
echo ""

if [ $PERCENTAGE -ge 90 ]; then
    echo -e "üéâ QA Status: ${GREEN}EXCELLENT${NC} ($PERCENTAGE%)"
    echo "‚úÖ Ready for production deployment"
elif [ $PERCENTAGE -ge 80 ]; then
    echo -e "üéØ QA Status: ${GREEN}GOOD${NC} ($PERCENTAGE%)"
    echo "‚úÖ Ready for staging deployment"
elif [ $PERCENTAGE -ge 70 ]; then
    echo -e "‚ö†Ô∏è  QA Status: ${YELLOW}ACCEPTABLE${NC} ($PERCENTAGE%)"
    echo "‚ö†Ô∏è  Address failing checks before production"
elif [ $PERCENTAGE -ge 50 ]; then
    echo -e "üîß QA Status: ${YELLOW}NEEDS WORK${NC} ($PERCENTAGE%)"
    echo "üîß Significant improvements needed"
else
    echo -e "üö® QA Status: ${RED}CRITICAL${NC} ($PERCENTAGE%)"
    echo "üö® Not ready for deployment"
fi

echo ""
echo "üîó Quick Actions:"
echo "‚Ä¢ Run 'npm run typecheck' to fix TypeScript issues"
echo "‚Ä¢ Run 'npm run lint' to fix code style issues"
echo "‚Ä¢ Run 'npm test' to check test status"
echo "‚Ä¢ Run 'npm run build' to verify build works"
echo ""

# Exit with appropriate code
if [ $PERCENTAGE -ge 80 ]; then
    exit 0
else
    exit 1
fi